/*
Copyright 2021 Antrea Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "antrea.io/antrea/multicluster/apis/multicluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TunnelEndpointImportLister helps list TunnelEndpointImports.
// All objects returned here must be treated as read-only.
type TunnelEndpointImportLister interface {
	// List lists all TunnelEndpointImports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TunnelEndpointImport, err error)
	// TunnelEndpointImports returns an object that can list and get TunnelEndpointImports.
	TunnelEndpointImports(namespace string) TunnelEndpointImportNamespaceLister
	TunnelEndpointImportListerExpansion
}

// tunnelEndpointImportLister implements the TunnelEndpointImportLister interface.
type tunnelEndpointImportLister struct {
	indexer cache.Indexer
}

// NewTunnelEndpointImportLister returns a new TunnelEndpointImportLister.
func NewTunnelEndpointImportLister(indexer cache.Indexer) TunnelEndpointImportLister {
	return &tunnelEndpointImportLister{indexer: indexer}
}

// List lists all TunnelEndpointImports in the indexer.
func (s *tunnelEndpointImportLister) List(selector labels.Selector) (ret []*v1alpha1.TunnelEndpointImport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TunnelEndpointImport))
	})
	return ret, err
}

// TunnelEndpointImports returns an object that can list and get TunnelEndpointImports.
func (s *tunnelEndpointImportLister) TunnelEndpointImports(namespace string) TunnelEndpointImportNamespaceLister {
	return tunnelEndpointImportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TunnelEndpointImportNamespaceLister helps list and get TunnelEndpointImports.
// All objects returned here must be treated as read-only.
type TunnelEndpointImportNamespaceLister interface {
	// List lists all TunnelEndpointImports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TunnelEndpointImport, err error)
	// Get retrieves the TunnelEndpointImport from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TunnelEndpointImport, error)
	TunnelEndpointImportNamespaceListerExpansion
}

// tunnelEndpointImportNamespaceLister implements the TunnelEndpointImportNamespaceLister
// interface.
type tunnelEndpointImportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TunnelEndpointImports in the indexer for a given namespace.
func (s tunnelEndpointImportNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TunnelEndpointImport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TunnelEndpointImport))
	})
	return ret, err
}

// Get retrieves the TunnelEndpointImport from the indexer for a given namespace and name.
func (s tunnelEndpointImportNamespaceLister) Get(name string) (*v1alpha1.TunnelEndpointImport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tunnelendpointimport"), name)
	}
	return obj.(*v1alpha1.TunnelEndpointImport), nil
}
